namespace Types
{
    public class ExampleClass {

        #pragma warning disable CS0169

        // ***Fields*** 

        private int _myInt;

        // One per class, don't need to create an instance
        private static int _myStaticInt = 123;

        // Must be assigned by the constructor
        private readonly int _myReadonlyInt;

        // Never changes, must be assigned here
        private const int myConstInt = 66;


        // ***Constructors***

        // The default constructor is generated by the compiler if not defined here.
        // Takes no parameters and does nothing except zero-initialization.

        // Defining the default constructor with code
        public ExampleClass() {

            _myReadonlyInt = 77;
        }

        // With both the readonly and static ints as parameters
        public ExampleClass(int r, int s) {

            _myReadonlyInt  = r;
            _myStaticInt = s;
        }

        // Chaining constructors. Static int as parameter, invoke default constructor
        public ExampleClass(int s) : this() {

            _myStaticInt = s;
        }

        // Static constructor: runs before the first use of the class.
        // No access modifiers or parameters
        static ExampleClass() {

            _myStaticInt = 321;
        }


        // Deconstructor. Use like this: (int r, int s) = new ExampleClass(2, 3);
        public void Deconstruct(out int r, out int s) {

            r = _myReadonlyInt;
            s = _myStaticInt;
        }


    }
}